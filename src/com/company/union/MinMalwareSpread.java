package com.company.union;

import java.util.Arrays;

//leetcode 928
public class MinMalwareSpread {

    //是不是病毒源头
    private static boolean[] virus = new boolean[301];

    //病毒源头删掉能拯救多少点
    private static int[] cnts = new int[301];
    private static int[] father = new int[301];
    //集合的大小是多少
    private static int[] sizes = new int[301];

    //该集合的感染点是什么
    //infect[a] == -1 表示目前a为代表的集合没有感染点
    //infect[a] == -2 表示目前a为代表的集合有多个感染点，不管删掉哪个，该集合都仍被感染
    //infect[a] == x >= 0 表示。。。的感染点为x，删掉x即可拯救该集合
    private  static int[] infect = new int[301];

    public static int minMalwareSpread(int[][] graph, int[] initial) {
        int n = graph.length;
        build(n, initial);

        //合并普通节点
        for(int i = 0; i < n; i++){
            for(int j = i + 1; j < n; j++){
                if(!virus[i] && !virus[j] && graph[i][j] == 1){
                    union(i,j);
                }
            }
        }

        for(int sick : initial){
            for(int neighbor = 0; neighbor < n; neighbor++){
                if(graph[sick][neighbor] == 1 && !virus[neighbor] && neighbor != sick){
                    int fn = find(neighbor);

                    if(infect[fn] == -1){
                        infect[fn] = sick;
                    }else if(infect[fn] > 0 && infect[fn] != sick){
                        infect[fn] =  -2;
                    }
                }
            }
        }

        //统计拯救数据
        for (int i = 0; i < n; i++) {
            if(i == find(i) && infect[i] >= 0){
                cnts[infect[i]] += sizes[i];
            }
        }
        Arrays.sort(initial);
        int ans = initial[0];
        int max = cnts[ans];
        for(int i : initial){
            if(cnts[i] > max){
                ans = i;
                max = cnts[i];
            }
        }
        return ans;
    }

    private static void union(int x, int y) {
        int fx = find(x);
        int fy = find(y);
        if(fx != fy){
            father[fy] = fx;
            sizes[fx] += sizes[fy];
        }
    }


    private static int find(int x) {
        if(x != father[x]){
            father[x] = find(father[x]);
        }
        return father[x];
    }

    private static void build(int length, int[] initial) {
        for (int i = 0; i < length; i++) {
            virus[i] = false;
            cnts[i] = 0;
            father[i] = i;
            sizes[i] = 1;
            infect[i] = -1;
        }
        for(int i : initial){
            virus[i] = true;
        }
    }

    public static void main(String[] args) {
        int[][] graph = {{1,1,0,0,0,0,0,0,0,0},{1,1,0,0,0,0,0,0,0,0},
                {0,0,1,0,0,0,0,0,0,0},{0,0,0,1,0,0,1,0,0,1},
                {0,0,0,0,1,0,0,0,0,0},{0,0,0,0,0,1,0,0,0,0},
                {0,0,0,1,0,0,1,0,0,0},{0,0,0,0,0,0,0,1,0,0},
                {0,0,0,0,0,0,0,0,1,0},{0,0,0,1,0,0,0,0,0,1}};
        int[] initial = {2, 1, 9};
        int ans = minMalwareSpread(graph, initial);
        System.out.println(ans);
    }
}
